params {

	
	/*
	How are the results stored in the output folder?
	By default, the files are symlinked from the work dir, so ensure to dereference 
	the symlinks before removing the work dir.
	For low volume results, change to "copy" or, if the file system supports it, to "link".
	(EMBL /scratch does not support "link")
	*/
	publish_mode = "symlink"

	taxonomy = "/scratch/schudoma/gtdb202/bac120_taxonomy_r202.tsv"

	hmmlib = "/g/scb2/zeller/milanese/software/bin/lib"
	
}

/* section below needs to be adjusted to local cluster */
executor {
	$slurm {
		queueSize = 30 
	}
	$local {
		cpus = 1
		memory = '4 GB'
	}
}

process {
	withName: align_marker_genes {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {100.GB * task.attempt}
		time = '10h'
		maxRetries = 3	
	}
	withName: create_marker_dbs {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {100.GB * task.attempt}
		time = '10h'
		maxRetries = 3	
	}
	withName: concat_alignments {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {100.GB * task.attempt}
		time = '10h'
		maxRetries = 3	
	}
	withName: create_genome_db {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {100.GB * task.attempt}
		time = '10h'
		maxRetries = 3	
	}
	withName: learn_function {
		executor = "slurm"                                      	
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 32
		memory = {(gene == "genome" ? 350.GB : 100.GB) * task.attempt}
		time = '14d'
		maxRetries = 3	
	}
	withName: train_classifiers {
		executor = "slurm"                                      	
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 32
		memory = {(gene == "genome" ? 350.GB : 100.GB) * task.attempt}
		time = '14d'
		maxRetries = 3	
	}
	withName: save_db {
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {8.GB * task.attempt}
		time = '10h'
		maxRetries = 3		
	}
}

